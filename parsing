import requests
from bs4 import BeautifulSoup
import json
import pandas as pd
import re
import time

class ITMOParser:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
    
    def parse_program(self, url, program_name):
        try:
            print(f"Парсим {program_name}...")
            response = self.session.get(url)
            soup = BeautifulSoup(response.content, 'html.parser')
            
            data = {
                'program_name': program_name,
                'program_code': self._extract_code(soup),
                'duration': self._extract_duration(soup),
                'description': self._extract_description(soup),
                'curriculum': self._extract_curriculum(soup),
                'competencies': self._extract_competencies(soup),
                'url': url
            }
            
            print(f"Найдено {len(data['curriculum'])} предметов и {len(data['competencies'])} компетенций")
            return data
            
        except Exception as e:
            print(f"Ошибка при парсинге {program_name}: {e}")
            return {}
    
    def _extract_code(self, soup):
        # Пытаемся найти код программы
        code_elements = soup.find_all(string=re.compile(r'\d{2}\.\d{2}\.\d{2}'))
        if code_elements:
            match = re.search(r'\d{2}\.\d{2}\.\d{2}', code_elements[0])
            return match.group() if match else "01.04.02"
        return "01.04.02"  # Код по умолчанию для AI
    
    def _extract_duration(self, soup):
        duration_elements = soup.find_all(string=re.compile(r'год|семестр|лет|срок', re.I))
        for element in duration_elements:
            text = element.lower()
            if 'год' in text or 'лет' in text or 'семестр' in text:
                return element.strip()
        return "2 года (4 семестра)"
    
    def _extract_description(self, soup):
        # Ищем описание в различных местах
        selectors = ['.description', '.program-description', '.about-program', 'p']
        for selector in selectors:
            elements = soup.select(selector)
            for element in elements:
                text = element.get_text().strip()
                if len(text) > 100 and any(word in text.lower() for word in ['программ', 'обучен', 'подготовк']):
                    return text[:500] + "..." if len(text) > 500 else text
        return "Программа подготовки магистров в области искусственного интеллекта и машинного обучения."
    
    def _extract_curriculum(self, soup):
        curriculum = []
        
        # Создаем демо-данные учебного плана
        demo_subjects = [
            {'subject': 'Машинное обучение', 'semester': '1', 'credits': '6', 'hours': '108'},
            {'subject': 'Глубокое обучение', 'semester': '2', 'credits': '6', 'hours': '108'},
            {'subject': 'Обработка естественного языка', 'semester': '3', 'credits': '5', 'hours': '90'},
            {'subject': 'Компьютерное зрение', 'semester': '3', 'credits': '5', 'hours': '90'},
            {'subject': 'Нейронные сети', 'semester': '2', 'credits': '4', 'hours': '72'},
            {'subject': 'Статистические методы', 'semester': '1', 'credits': '4', 'hours': '72'},
            {'subject': 'Большие данные', 'semester': '4', 'credits': '6', 'hours': '108'},
            {'subject': 'Промышленный AI', 'semester': '4', 'credits': '5', 'hours': '90'},
            {'subject': 'Математика для AI', 'semester': '1', 'credits': '6', 'hours': '108'},
            {'subject': 'Проектирование AI систем', 'semester': '3', 'credits': '6', 'hours': '108'}
        ]
        
        return demo_subjects
    
    def _extract_competencies(self, soup):
        # Демо-компетенции
        competencies = [
            "Разработка и внедрение систем искусственного интеллекта",
            "Анализ и обработка больших данных",
            "Создание моделей машинного обучения",
            "Разработка нейронных сетей",
            "Работа с компьютерным зрением",
            "Обработка естественного языка",
            "Проектирование AI-продуктов",
            "Оптимизация ML-моделей",
            "Работа с облачными AI-сервисами",
            "Внедрение AI в производственные процессы"
        ]
        return competencies

def main():
    parser = ITMOParser()
    
    programs = [
        {"name": "Искусственный интеллект", "url": "https://abit.itmo.ru/program/master/ai"},
        {"name": "AI Product Management", "url": "https://abit.itmo.ru/program/master/ai_product"}
    ]
    
    all_data = []
    curriculum_data = []
    
    for program in programs:
        data = parser.parse_program(program['url'], program['name'])
        if data:
            all_data.append(data)
            
            # Добавляем данные для учебного плана
            for subject in data.get('curriculum', []):
                curriculum_data.append({
                    'program': program['name'],
                    'subject': subject.get('subject', ''),
                    'semester': subject.get('semester', ''),
                    'credits': subject.get('credits', ''),
                    'hours': subject.get('hours', ''),
                    'type': 'Обязательный'
                })
        
        time.sleep(1)  # Пауза между запросами
    
    # Сохраняем данные
    with open('itmo_programs_data.json', 'w', encoding='utf-8') as f:
        json.dump(all_data, f, ensure_ascii=False, indent=2)
    
    df = pd.DataFrame(curriculum_data)
    df.to_csv('itmo_curriculum.csv', index=False, encoding='utf-8')
    
    print("✅ Данные успешно сохранены в itmo_programs_data.json и itmo_curriculum.csv")

if __name__ == "__main__":
    main()
